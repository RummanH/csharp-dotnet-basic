| **Collection**                         | **Type**       | **Ordering**                 | **Duplicates Allowed** | **Complexity**                                     | **Best Use Case**                           |
| -------------------------------------- | -------------- | ---------------------------- | ---------------------- | -------------------------------------------------- | ------------------------------------------- |
| **Array**                              | Fixed-size     | Index-based                  | ✅ Yes                  | `O(1)` access                                      | Fixed-size, fast indexing                   |
| **List<T>**                            | Generic        | Index-based, insertion order | ✅ Yes                  | `O(1)` access, `O(n)` insert/remove                | General-purpose dynamic array               |
| **LinkedList<T>**                      | Generic        | Sequential                   | ✅ Yes                  | `O(1)` add/remove (node known), `O(n)` search      | Frequent insert/remove in middle            |
| **HashSet<T>**                         | Generic        | Unordered                    | ❌ No                   | `O(1)` add/lookup                                  | Unique collection, fast lookup              |
| **SortedSet<T>**                       | Generic        | Sorted order                 | ❌ No                   | `O(log n)`                                         | Unique collection with ordering             |
| **Dictionary<TKey,TValue>**            | Generic        | Unordered                    | ❌ No duplicate keys    | `O(1)` lookup                                      | Key-value store, fast access                |
| **SortedDictionary<TKey,TValue>**      | Generic        | Sorted by key                | ❌ No                   | `O(log n)`                                         | Frequent inserts with ordering              |
| **SortedList<TKey,TValue>**            | Generic        | Sorted by key                | ❌ No                   | `O(log n)` lookup, `O(n)` insert                   | Smaller, memory-efficient sorted dictionary |
| **Queue<T>**                           | Generic        | FIFO                         | ✅ Yes                  | `O(1)` enqueue/dequeue                             | First-in-first-out (e.g., tasks)            |
| **Stack<T>**                           | Generic        | LIFO                         | ✅ Yes                  | `O(1)` push/pop                                    | Last-in-first-out (e.g., undo ops)          |
| **ObservableCollection<T>**            | Generic        | Maintains order              | ✅ Yes                  | Similar to `List<T>`                               | WPF/MVVM apps (UI auto updates)             |
| **ConcurrentDictionary<TKey,TValue>**  | Concurrent     | Unordered                    | ❌ No                   | `O(1)` lookup                                      | Thread-safe dictionary                      |
| **ConcurrentQueue<T>**                 | Concurrent     | FIFO                         | ✅ Yes                  | `O(1)` enqueue/dequeue                             | Thread-safe queue                           |
| **ConcurrentStack<T>**                 | Concurrent     | LIFO                         | ✅ Yes                  | `O(1)` push/pop                                    | Thread-safe stack                           |
| **ConcurrentBag<T>**                   | Concurrent     | Unordered                    | ✅ Yes                  | `O(1)` add/remove (amortized)                      | Fast unordered thread-safe collection       |
| **BlockingCollection<T>**              | Concurrent     | FIFO / LIFO                  | ✅ Yes                  | Depends on underlying collection                   | Producer-consumer threading                 |
| **ImmutableList<T>**                   | Immutable      | Maintains order              | ✅ Yes                  | `O(n)` to create modified copy                     | Thread-safe functional style                |
| **ImmutableDictionary<TKey,TValue>**   | Immutable      | Unordered                    | ❌ No                   | `O(n)` updates                                     | Thread-safe key-value store                 |
| **BitArray**                           | Specialized    | Index-based bits             | ❌ No (bool only)       | `O(1)` access                                      | Memory-efficient booleans                   |
| **NameValueCollection**                | Specialized    | Key + multiple values        | ✅ Yes (multi-value)    | `O(1)` lookup (small scale)                        | Query strings, headers                      |
